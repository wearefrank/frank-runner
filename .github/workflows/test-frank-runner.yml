name: TestFrankRunner.
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  testing-linux:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        example: [Frank2Example1, Frank2Example2, Frank2Example3]
    name: Test Frank!Runner
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Cache Frank!Runner dependencies - build
      uses: actions/cache@v2
      with:
        path: build
        key: ${{ runner.os }}-frank-runner-build
        restore-keys: |
          ${{ runner.os }}-frank-runner-build
    - name: Cache Frank!Runner dependencies - download
      uses: actions/cache@v2
      with:
        path: download
        key: ${{ runner.os }}-frank-runner-download
        restore-keys: |
          ${{ runner.os }}-frank-runner-download
    - name: Cache Maven downloads
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository/
        key: ${{ runner.os }}-maven
        restore-keys: |
          ${{ runner.os }}-maven

    - name: Configure another port
      run: echo "tomcat.port=8091" > examples/${{ matrix.example }}/frank-runner.properties
    - name: Start Frank!Runner ${{ matrix.example }} - linux
      if: ${{ matrix.os }} === 'ubuntu-latest'
      run: bash ./restart.sh &
      working-directory: examples/${{ matrix.example }}
    - name: Start Frank!Runner ${{ matrix.example }} - windows
      if: ${{ matrix.os }} === 'windows-latest'
      run: cmd /C .\restart.bat
      working-directory: examples\${{ matrix.example }}
    - name: Wait until Frank!Framework is up - linux
      if: ${{ matrix.os }} === 'ubuntu-latest'
      run: bash .github/workflows/waitForUrl.sh http://localhost:8091/iaf/api/server/health 500
    - name: Wait until Frank!Framework is up - windows
      if: ${{ matrix.os }} === 'windows-latest'
      run: .github\workflows\waitForUrl.bat http://localhost:8091/iaf/api/server/health 500
    - name: Capture status
      id: captureStatus
      uses: fjogeleit/http-request-action@v1
      with:
        method: GET
        url: "http://localhost:8091/iaf/api/server/health"
    - name: Analyze status
      uses: actions/github-script@v6
      with:
        script: |
          let rawStatus = '${{ steps.captureStatus.outputs.response }}'
          core.info('Captured status: ' + rawStatus)
          let status = JSON.parse(rawStatus)
          if(! status.status) {
            core.setFailed('Response has no field "status"')
          } else if(status.status !== 'OK') {
            core.setFailed('Field "status" is not "OK"')
          } else {
            core.info('status is OK');
          }
    - name: Store Apache Tomcat log
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: logs
        path: build/*/logs/catalina.out